/*! For license information please see bundle.js.LICENSE.txt */
!function(e){var t={};function s(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,s),o.l=!0,o.exports}s.m=e,s.c=t,s.d=function(e,t,r){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(s.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)s.d(r,o,function(t){return e[t]}.bind(null,o));return r},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s="./src/index.js")}({"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/resolve-url-loader/index.js!./node_modules/sass-loader/dist/cjs.js?!./src/assets/sass/main.scss":function(e,t,s){},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":function(e,t,s){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},n=function(){var e={};return function(t){if(void 0===e[t]){var s=document.querySelector(t);if(window.HTMLIFrameElement&&s instanceof window.HTMLIFrameElement)try{s=s.contentDocument.head}catch(e){s=null}e[t]=s}return e[t]}}(),i=[];function l(e){for(var t=-1,s=0;s<i.length;s++)if(i[s].identifier===e){t=s;break}return t}function a(e,t){for(var s={},r=[],o=0;o<e.length;o++){var n=e[o],a=t.base?n[0]+t.base:n[0],c=s[a]||0,u="".concat(a," ").concat(c);s[a]=c+1;var d=l(u),m={css:n[1],media:n[2],sourceMap:n[3]};-1!==d?(i[d].references++,i[d].updater(m)):i.push({identifier:u,updater:b(m,t),references:1}),r.push(u)}return r}function c(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=s.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var i=n(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var u,d=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function m(e,t,s,r){var o=s?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=d(t,o);else{var n=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(n,i[t]):e.appendChild(n)}}function h(e,t,s){var r=s.css,o=s.media,n=s.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),n&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(n))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var f=null,p=0;function b(e,t){var s,r,o;if(t.singleton){var n=p++;s=f||(f=c(t)),r=m.bind(null,s,n,!1),o=m.bind(null,s,n,!0)}else s=c(t),r=h.bind(null,s,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(s)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var s=a(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<s.length;r++){var o=l(s[r]);i[o].references--}for(var n=a(e,t),c=0;c<s.length;c++){var u=l(s[c]);0===i[u].references&&(i[u].updater(),i.splice(u,1))}s=n}}}},"./src/assets/sass/main.scss":function(e,t,s){var r=s("./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),o=s("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/resolve-url-loader/index.js!./node_modules/sass-loader/dist/cjs.js?!./src/assets/sass/main.scss");"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var n={insert:"head",singleton:!1},i=(r(o,n),o.locals?o.locals:{});e.exports=i},"./src/index.js":function(e,t,s){"use strict";s.r(t);s("./src/assets/sass/main.scss");var r=s("./src/modules/sorting-visualizer/SortingVisualizer.js"),o=s("./src/modules/sortingAlgorithms/index.js");const n={bubble:{name:"Bubble Sort",func:o.bubbleSort},merge:{name:"Merge Sort",func:o.mergeSort},quick:{name:"Quick Sort",func:o.quickSort}};new r.default(n,"container",1200,600,4,50).initialize()},"./src/modules/helpers/asyncDelay.js":function(e,t,s){"use strict";s.r(t),t.default=e=>new Promise(t=>setTimeout(t,e))},"./src/modules/helpers/block.js":function(e,t,s){"use strict";s.r(t),s.d(t,"createBlock",(function(){return r})),s.d(t,"getAllBlocks",(function(){return o})),s.d(t,"visualizeSwapBlocks",(function(){return n})),s.d(t,"updateBlock",(function(){return i})),s.d(t,"setBlockBackground",(function(){return l})),s.d(t,"updateBlocksFromArray",(function(){return a})),s.d(t,"createValuesArrFromBlocks",(function(){return c})),s.d(t,"visualizeBlocks",(function(){return u})),s.d(t,"visualizeBlock",(function(){return d}));const r=(e,t,s,r)=>{const o=document.getElementById(e),n=document.createElement("div");n.style.width=t+"px",n.style.height=s+"px",n.style.marginRight=Math.floor(t/5)+"px",n.style.fontSize=Math.floor(t/5)+"px",n.style.backgroundColor=r,n.classList="block",t>23&&(n.innerText=s),n.dataset.value=s,o.appendChild(n)},o=()=>document.querySelectorAll(".block"),n=async(e,t,s)=>{await new Promise((r,o)=>{window.requestAnimationFrame(()=>{((e,t)=>{const s=e.dataset.value,r=e.style.backgroundColor;i(e,t.dataset.value),e.style.backgroundColor=t.style.backgroundColor,i(t,s),t.style.backgroundColor=r})(e,t),setTimeout(r,s)})})},i=(e,t)=>{e.style.width.slice(0,2)>23&&(e.innerText=t),e.dataset.value=t,e.style.height=t+"px"},l=(e,t)=>{e.style.backgroundColor=t},a=(e,t)=>{for(let s=0;s<t.length;s++)i(e[s],t[s])},c=e=>{const t=[];return e.forEach(e=>t.push(parseInt(e.dataset.value,10))),t},u=(e,t,s,r)=>new Promise((o,n)=>{window.requestAnimationFrame(()=>{e.style.backgroundColor=s,t.style.backgroundColor=s}),setTimeout(o,r)}),d=(e,t,s)=>new Promise((r,o)=>{window.requestAnimationFrame(()=>{e.style.backgroundColor=t}),setTimeout(r,s)})},"./src/modules/helpers/colors.js":function(e,t,s){"use strict";s.r(t),s.d(t,"redColor",(function(){return r})),s.d(t,"greenColor",(function(){return o})),s.d(t,"yellowColor",(function(){return n})),s.d(t,"purpleColor",(function(){return i})),s.d(t,"baseColor",(function(){return l}));const r="#ee554a",o="#69c653",n="#f1e059",i="purple",l="#4cc8ea"},"./src/modules/helpers/getCurrentSpeed.js":function(e,t,s){"use strict";s.r(t),t.default=()=>parseInt(document.getElementById("speedVal").value,10)},"./src/modules/helpers/getRandomNum.js":function(e,t,s){"use strict";s.r(t),s.d(t,"getRandomNum",(function(){return r}));const r=(e,t)=>Math.floor(Math.random()*t)+e},"./src/modules/helpers/withEndVisualization.js":function(e,t,s){"use strict";s.r(t),s.d(t,"withEndVisualization",(function(){return i}));var r=s("./src/modules/helpers/getCurrentSpeed.js"),o=s("./src/modules/helpers/block.js"),n=s("./src/modules/helpers/colors.js");const i=e=>async(t,s,i)=>{await e(t,s,i);const l=Math.min(Object(r.default)()+1e3/s);for(let e=0;e<s;e++){if(i())return;await Object(o.visualizeBlock)(t[e],n.purpleColor,l)}}},"./src/modules/sorting-visualizer/SortingVisualizer.js":function(e,t,s){"use strict";s.r(t);var r=s("./src/modules/helpers/block.js"),o=s("./src/modules/helpers/colors.js"),n=s("./src/modules/helpers/asyncDelay.js"),i=s("./src/modules/helpers/getRandomNum.js");s("./src/modules/helpers/withEndVisualization.js");t.default=class{constructor(e,t,s,r,o,n){this.containerId=t,this.width=s,this.height=r,this.minHeight=60,this.n=o,this.nMin=4,this.nMax=100,this.speed=n,this.speedMin=1,this.speedMax=500,this.isSorting=!1,this.isStop=!1,this.algorithms=e,this.currentAlgorithm=null,this.isStopped=this.isStopped.bind(this)}initialize(){this.createNav(this.algorithms),this.createBlocks(this.n),this.setInitialAlgorithm("bubble"),this.addEventListeners(),this.setRangeInputProperties()}addEventListeners(){this.addElementsValInputEventListeners(),this.addBtnsEventListeners(),this.addNavAlgoElemsEventListeners()}addElementsValInputEventListeners(){document.getElementById("elementsNum").addEventListener("change",e=>{const t=e.target.value;this.n=parseInt(t,10),this.createBlocks(t)})}addBtnsEventListeners(){const e=document.getElementById("sortBtn"),t=document.getElementById("stopBtn"),s=document.getElementById("randomizeBtn");e.addEventListener("click",async e=>{if(this.isStop=!1,!this.isSorting){this.handleIsSortingState(!0);const e=document.querySelectorAll(".block");await this.prepareBlocksForSort(e),await this.currentAlgorithm(e,this.n,this.isStopped),this.handleIsSortingState(!1)}}),s.addEventListener("click",()=>{if(!this.isSorting){const e=document.querySelectorAll(".block");this.clearBlocksColor(e),this.randomizeBlocks(e)}}),t.addEventListener("click",()=>{if(this.isSorting){this.isStop=!0;document.querySelectorAll(".block")}})}addNavAlgoElemsEventListeners(){const e=document.querySelectorAll(".nav-algorithm-js");e.forEach(t=>{t.addEventListener("click",t=>{t.target.classList.contains("blocked")||(e.forEach(e=>e.classList.remove("active")),t.target.classList.add("active"),this.currentAlgorithm=this.algorithms[t.target.dataset.algorithmKey].func)})})}setRangeInputProperties(){const e=document.getElementById("elementsNum");e.setAttribute("min",this.nMin),e.setAttribute("max",this.nMax),e.setAttribute("value",this.n);const t=document.getElementById("speedVal");t.setAttribute("min",this.speedMin),t.setAttribute("max",this.speedMax),t.setAttribute("value",this.speed),t.style.direction="rtl"}setInitialAlgorithm(e){this.currentAlgorithm=this.algorithms[e].func,document.querySelectorAll(".nav-algorithm-js")[0].classList.add("active")}handleIsSortingState(e){this.isSorting=e,document.getElementById("sortBtn").disabled=e,document.getElementById("randomizeBtn").disabled=e,document.getElementById("elementsNum").disabled=e,this.handleOtherNavAlgorithms(e)}handleOtherNavAlgorithms(e){const t=document.querySelectorAll(".nav-algorithm-js");e?t.forEach(e=>e.classList.contains("active")?null:e.classList.add("blocked")):t.forEach(e=>e.classList.contains("blocked")?e.classList.remove("blocked"):null)}createBlocks(e){this.clearContainer();const t=Math.floor(this.width/e);for(let s=0;s<e;s++)Object(r.createBlock)(this.containerId,t,Object(i.getRandomNum)(this.minHeight,this.height),o.baseColor)}randomizeBlocks(e){e.forEach(e=>{Object(r.updateBlock)(e,Object(i.getRandomNum)(this.minHeight,this.height)),Object(r.setBlockBackground)(e,o.baseColor)})}clearBlocksColor(e){e.forEach(e=>{Object(r.setBlockBackground)(e,o.baseColor)})}isStopped(){return this.isStop}async prepareBlocksForSort(e){e.forEach(e=>{Object(r.setBlockBackground)(e,o.baseColor)}),await Object(n.default)(this.speed)}createNav(e){const t=document.getElementById("nav");for(let[s,r]of Object.entries(e)){const e=document.createElement("div");e.classList="nav-algorithm-js",e.innerText=r.name,e.dataset.algorithmKey=s,t.appendChild(e)}}clearContainer(){document.getElementById(this.containerId).innerHTML=""}}},"./src/modules/sortingAlgorithms/bubbleSort.js":function(e,t,s){"use strict";s.r(t);var r=s("./src/modules/helpers/block.js"),o=s("./src/modules/helpers/colors.js"),n=s("./src/modules/helpers/getCurrentSpeed.js"),i=s("./src/modules/helpers/withEndVisualization.js");t.default=Object(i.withEndVisualization)(async(e,t,s)=>{const i=Object(r.createValuesArrFromBlocks)(e);let l;do{l=!1;for(let a=0;a<t-1;a++){if(s())return;const t=Object(n.default)();if(await Object(r.visualizeBlocks)(e[a],e[a+1],o.greenColor,t),i[a]>i[a+1]){await Object(r.visualizeBlocks)(e[a],e[a+1],o.redColor,t);const s=i[a];i[a]=i[a+1],i[a+1]=s,await Object(r.visualizeSwapBlocks)(e[a],e[a+1],t),l=!0}await Object(r.visualizeBlocks)(e[a],e[a+1],o.baseColor,t)}}while(l)})},"./src/modules/sortingAlgorithms/index.js":function(e,t,s){"use strict";s.r(t);var r=s("./src/modules/sortingAlgorithms/bubbleSort.js");s.d(t,"bubbleSort",(function(){return r.default}));var o=s("./src/modules/sortingAlgorithms/mergeSort.js");s.d(t,"mergeSort",(function(){return o.default}));var n=s("./src/modules/sortingAlgorithms/quickSort.js");s.d(t,"quickSort",(function(){return n.default}))},"./src/modules/sortingAlgorithms/mergeSort.js":function(e,t,s){"use strict";s.r(t);var r=s("./src/modules/helpers/block.js"),o=s("./src/modules/helpers/getCurrentSpeed.js"),n=s("./src/modules/helpers/colors.js"),i=s("./src/modules/helpers/withEndVisualization.js");t.default=Object(i.withEndVisualization)(async(e,t,s)=>{const i=Object(r.createValuesArrFromBlocks)(e),l=t;for(let t=1;t<=l;t*=2)for(let a=0;a<l;a+=2*t){let c=a,u=Math.min(t+a,l),d=u,m=Math.min(u+t,l);for(;c<d&&u<m;){if(s())return;const t=Object(o.default)();await Object(r.visualizeBlocks)(e[c],e[u],n.greenColor,t),i[c]>=i[u]?(await Object(r.visualizeBlocks)(e[c],e[u],n.redColor,t),i.splice(c,0,i[u]),u++,c++,d++,i.splice(u,1),await Object(r.visualizeBlocks)(e[c-1],e[u-1],n.baseColor,t),Object(r.updateBlocksFromArray)(e,i)):(c++,await Object(r.visualizeBlocks)(e[c-1],e[u],n.baseColor,t))}}})},"./src/modules/sortingAlgorithms/quickSort.js":function(e,t,s){"use strict";s.r(t);var r=s("./src/modules/helpers/block.js"),o=s("./src/modules/helpers/getCurrentSpeed.js"),n=s("./src/modules/helpers/colors.js"),i=s("./src/modules/helpers/withEndVisualization.js");const l=async(e,t,s,i,a)=>{if(t<s){let c=await(async(e,t,s,i,l)=>{let a=t+1,c=e[t];await Object(r.visualizeBlock)(i[t],n.yellowColor,Object(o.default)());for(let u=t+1;u<=s;u++){if(l())return;const t=Object(o.default)();if(await Object(r.visualizeBlocks)(i[a],i[u],n.greenColor,t),e[u]<c){await Object(r.visualizeBlocks)(i[a],i[u],n.redColor,t);const s=e[a];e[a]=e[u],e[u]=s,await Object(r.visualizeSwapBlocks)(i[a],i[u],t),await Object(r.visualizeBlocks)(i[a],i[u],n.baseColor,t),a++}else await Object(r.visualizeBlocks)(i[a],i[u],n.baseColor,t)}const u=e[t];return e[t]=e[a-1],e[a-1]=u,await Object(r.visualizeSwapBlocks)(i[t],i[a-1],Object(o.default)()),await Object(r.visualizeBlocks)(i[t],i[a-1],n.baseColor,Object(o.default)()),a-1})(e,t,s,i,a);if(a())return;await l(e,t,c-1,i,a),await l(e,c+1,s,i,a)}};t.default=Object(i.withEndVisualization)(async(e,t,s)=>{const o=Object(r.createValuesArrFromBlocks)(e);await l(o,0,t-1,e,s)})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvc2Fzcy9tYWluLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL2hlbHBlcnMvYXN5bmNEZWxheS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9oZWxwZXJzL2Jsb2NrLmpzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL2hlbHBlcnMvY29sb3JzLmpzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL2hlbHBlcnMvZ2V0Q3VycmVudFNwZWVkLmpzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL2hlbHBlcnMvZ2V0UmFuZG9tTnVtLmpzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL2hlbHBlcnMvd2l0aEVuZFZpc3VhbGl6YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvc29ydGluZy12aXN1YWxpemVyL1NvcnRpbmdWaXN1YWxpemVyLmpzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3NvcnRpbmdBbGdvcml0aG1zL2J1YmJsZVNvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvc29ydGluZ0FsZ29yaXRobXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvc29ydGluZ0FsZ29yaXRobXMvbWVyZ2VTb3J0LmpzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3NvcnRpbmdBbGdvcml0aG1zL3F1aWNrU29ydC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIm1lbW8iLCJpc09sZElFIiwiQm9vbGVhbiIsIndpbmRvdyIsImRvY3VtZW50IiwiYWxsIiwiYXRvYiIsImdldFRhcmdldCIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJzdHlsZXNJbkRvbSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsImxlbmd0aCIsIm1vZHVsZXNUb0RvbSIsImxpc3QiLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiaXRlbSIsImlkIiwiYmFzZSIsImNvdW50IiwiY29uY2F0IiwiaW5kZXgiLCJvYmoiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwicHVzaCIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGUiLCJjcmVhdGVFbGVtZW50IiwiYXR0cmlidXRlcyIsIm5vbmNlIiwia2V5cyIsImZvckVhY2giLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsImZpbHRlciIsImpvaW4iLCJhcHBseVRvU2luZ2xldG9uVGFnIiwicmVtb3ZlIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjc3NOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJhcHBseVRvVGFnIiwicmVtb3ZlQXR0cmlidXRlIiwiYnRvYSIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImZpcnN0Q2hpbGQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwidXBkYXRlIiwic3R5bGVJbmRleCIsInBhcmVudE5vZGUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJuZXdPYmoiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwidG9TdHJpbmciLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsInNwbGljZSIsImFwaSIsImNvbnRlbnQiLCJkZWZhdWx0IiwiZXhwb3J0ZWQiLCJsb2NhbHMiLCJzb3J0QWxnb3JpdGhtcyIsImJ1YmJsZSIsImZ1bmMiLCJtZXJnZSIsInF1aWNrIiwiaW5pdGlhbGl6ZSIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsIm1zIiwiY3JlYXRlQmxvY2siLCJwYXJlbnRJZCIsIndpZHRoIiwiaGVpZ2h0IiwiYmdDb2xvciIsInBhcmVudCIsImdldEVsZW1lbnRCeUlkIiwiYmxvY2siLCJtYXJnaW5SaWdodCIsIk1hdGgiLCJmbG9vciIsImZvbnRTaXplIiwiYmFja2dyb3VuZENvbG9yIiwiY2xhc3NMaXN0IiwiaW5uZXJUZXh0IiwiZGF0YXNldCIsImdldEFsbEJsb2NrcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJ2aXN1YWxpemVTd2FwQmxvY2tzIiwiYXN5bmMiLCJibG9ja18xIiwiYmxvY2tfMiIsInNwZWVkIiwicmVzIiwicmVqIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidGVtcFZhbHVlXzEiLCJ0ZW1wQmdDb2xvcl8xIiwidXBkYXRlQmxvY2siLCJzd2FwUHJvcGVydGllcyIsInNsaWNlIiwic2V0QmxvY2tCYWNrZ3JvdW5kIiwiY29sb3IiLCJ1cGRhdGVCbG9ja3NGcm9tQXJyYXkiLCJibG9ja3MiLCJhcnIiLCJjcmVhdGVWYWx1ZXNBcnJGcm9tQmxvY2tzIiwiZWxlbSIsInBhcnNlSW50IiwidmlzdWFsaXplQmxvY2tzIiwidmlzdWFsaXplQmxvY2siLCJyZWRDb2xvciIsImdyZWVuQ29sb3IiLCJ5ZWxsb3dDb2xvciIsInB1cnBsZUNvbG9yIiwiYmFzZUNvbG9yIiwiZ2V0UmFuZG9tTnVtIiwibWluIiwibWF4IiwicmFuZG9tIiwid2l0aEVuZFZpc3VhbGl6YXRpb24iLCJpc1N0b3BwZWQiLCJqIiwiYWxnb3JpdGhtcyIsImNvbnRhaW5lcklkIiwidGhpcyIsIm1pbkhlaWdodCIsIm5NaW4iLCJuTWF4Iiwic3BlZWRNaW4iLCJzcGVlZE1heCIsImlzU29ydGluZyIsImlzU3RvcCIsImN1cnJlbnRBbGdvcml0aG0iLCJjcmVhdGVOYXYiLCJjcmVhdGVCbG9ja3MiLCJzZXRJbml0aWFsQWxnb3JpdGhtIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJzZXRSYW5nZUlucHV0UHJvcGVydGllcyIsImFkZEVsZW1lbnRzVmFsSW5wdXRFdmVudExpc3RlbmVycyIsImFkZEJ0bnNFdmVudExpc3RlbmVycyIsImFkZE5hdkFsZ29FbGVtc0V2ZW50TGlzdGVuZXJzIiwiYWRkRXZlbnRMaXN0ZW5lciIsInNvcnRCdG4iLCJzdG9wQnRuIiwicmFuZG9taXplQnRuIiwiaGFuZGxlSXNTb3J0aW5nU3RhdGUiLCJwcmVwYXJlQmxvY2tzRm9yU29ydCIsImNsZWFyQmxvY2tzQ29sb3IiLCJyYW5kb21pemVCbG9ja3MiLCJlbGVtcyIsImNvbnRhaW5zIiwiYWRkIiwiYWxnb3JpdGhtS2V5IiwiZWxlbWVudHNOdW1JbnB1dCIsInNwZWVkVmFsSW5wdXQiLCJkaXJlY3Rpb24iLCJhbGdvS2V5IiwiZGlzYWJsZWQiLCJoYW5kbGVPdGhlck5hdkFsZ29yaXRobXMiLCJjbGVhckNvbnRhaW5lciIsImJsb2NrV2lkdGgiLCJuYXYiLCJhbGdvIiwiZW50cmllcyIsImlubmVySFRNTCIsInN3YXBwZWQiLCJ0ZW1wIiwibGVuIiwic2l6ZSIsImxlZnQiLCJyaWdodCIsImxlZnRUbyIsInJpZ2h0VG8iLCJxdWlja1NvcnRBbGdvIiwic3RhcnQiLCJlbmQiLCJwaXZvdFBvcyIsInBpdiIsInBhcnRpdGlvbiJdLCJtYXBwaW5ncyI6IjthQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZBMUIsRUFBb0JrQixFQUFFTyxHQUN0QlgsT0FBT0MsZUFBZVUsRUFBSSxVQUFXLENBQUVULFlBQVks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RUFBT3ZLLEdBQUl1SyxFQUFPa0IsR0FBSSxXQUFVOUIsR0FFdEQsTUFBTTJFLEVBQU85RCxFQUFJeEssR0FDakJ3SyxFQUFJeEssR0FBS3dLLEVBQUlpQixHQUNiakIsRUFBSWlCLEdBQUs2QyxRQUdILDhCQUFvQi9ELEVBQU92SyxHQUFJdUssRUFBT2tCLEdBQUk5QixTQUMxQywwQkFBZ0JZLEVBQU92SyxHQUFJdUssRUFBT2tCLEdBQUksWUFBVzlCLEdBRXZEM0osZUFFTSwwQkFBZ0J1SyxFQUFPdkssR0FBSXVLLEVBQU9rQixHQUFJLFlBQVc5QixHQUkzRCxNQUFNMkUsRUFBTzlELEVBQUlzRSxHQVlqQixPQVhBdEUsRUFBSXNFLEdBQVN0RSxFQUFJeEssRUFBSSxHQUNyQndLLEVBQUl4SyxFQUFJLEdBQUtzTyxRQUVQLDhCQUFvQi9ELEVBQU91RSxHQUFRdkUsRUFBT3ZLLEVBQUksR0FBSSwyQkFDbEQsMEJBQ0p1SyxFQUFPdUUsR0FDUHZFLEVBQU92SyxFQUFJLEdBQ1gsWUFDQSxxQkFHS0EsRUFBSSxHQUtZa1AsQ0FBVTFFLEVBQUtzRSxFQUFPQyxFQUFLeEUsRUFBUWlCLEdBQ3hELEdBQUlBLElBQWEsYUFFWHFELEVBQWNyRSxFQUFLc0UsRUFBT0UsRUFBVyxFQUFHekUsRUFBUWlCLFNBQ2hEcUQsRUFBY3JFLEVBQUt3RSxFQUFXLEVBQUdELEVBQUt4RSxFQUFRaUIsS0FVekMseUNBTkdoQyxNQUFPZSxFQUFROUksRUFBRytKLEtBQ2xDLE1BQU1oQixFQUFNLG9DQUEwQkQsU0FFaENzRSxFQUFjckUsRUFBSyxFQUFHL0ksRUFBSSxFQUFHOEksRUFBUWlCIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vc3JjL2luZGV4LmpzXCIpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiBidG9hKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3TGlzdCkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtdXJsLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC00IS4vbWFpbi5zY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG52YXIgZXhwb3J0ZWQgPSBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDoge307XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVkOyIsImltcG9ydCBcIi4vYXNzZXRzL3Nhc3MvbWFpbi5zY3NzXCI7XG5pbXBvcnQgU29ydGluZ1Zpc3VhbGl6ZXIgZnJvbSBcIi4vbW9kdWxlcy9zb3J0aW5nLXZpc3VhbGl6ZXIvU29ydGluZ1Zpc3VhbGl6ZXJcIjtcbmltcG9ydCB7IGJ1YmJsZVNvcnQsIG1lcmdlU29ydCwgcXVpY2tTb3J0IH0gZnJvbSBcIi4vbW9kdWxlcy9zb3J0aW5nQWxnb3JpdGhtc1wiO1xuXG5jb25zdCBzb3J0QWxnb3JpdGhtcyA9IHtcbiAgYnViYmxlOiB7XG4gICAgbmFtZTogXCJCdWJibGUgU29ydFwiLFxuICAgIGZ1bmM6IGJ1YmJsZVNvcnQsXG4gIH0sXG4gIG1lcmdlOiB7XG4gICAgbmFtZTogXCJNZXJnZSBTb3J0XCIsXG4gICAgZnVuYzogbWVyZ2VTb3J0LFxuICB9LFxuICBxdWljazoge1xuICAgIG5hbWU6IFwiUXVpY2sgU29ydFwiLFxuICAgIGZ1bmM6IHF1aWNrU29ydCxcbiAgfSxcbn07XG5cbmNvbnN0IHNvcnRpbmdWaXN1YWxpemVyID0gbmV3IFNvcnRpbmdWaXN1YWxpemVyKFxuICBzb3J0QWxnb3JpdGhtcyxcbiAgXCJjb250YWluZXJcIixcbiAgMTIwMCxcbiAgNjAwLFxuICA0LFxuICA1MFxuKTtcbnNvcnRpbmdWaXN1YWxpemVyLmluaXRpYWxpemUoKTtcbiIsImV4cG9ydCBkZWZhdWx0IChtcykgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTtcbn07XG4iLCJleHBvcnQgY29uc3QgY3JlYXRlQmxvY2sgPSAocGFyZW50SWQsIHdpZHRoLCBoZWlnaHQsIGJnQ29sb3IpID0+IHtcbiAgY29uc3QgcGFyZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocGFyZW50SWQpO1xuXG4gIGNvbnN0IGJsb2NrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgYmxvY2suc3R5bGUud2lkdGggPSBgJHt3aWR0aH1weGA7XG4gIGJsb2NrLnN0eWxlLmhlaWdodCA9IGAke2hlaWdodH1weGA7XG4gIGJsb2NrLnN0eWxlLm1hcmdpblJpZ2h0ID0gYCR7TWF0aC5mbG9vcih3aWR0aCAvIDUpfXB4YDtcbiAgYmxvY2suc3R5bGUuZm9udFNpemUgPSBgJHtNYXRoLmZsb29yKHdpZHRoIC8gNSl9cHhgO1xuICBibG9jay5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBiZ0NvbG9yO1xuICBibG9jay5jbGFzc0xpc3QgPSBcImJsb2NrXCI7XG5cbiAgaWYgKHdpZHRoID4gMjMpIHtcbiAgICBibG9jay5pbm5lclRleHQgPSBoZWlnaHQ7XG4gIH1cbiAgYmxvY2suZGF0YXNldC52YWx1ZSA9IGhlaWdodDtcblxuICBwYXJlbnQuYXBwZW5kQ2hpbGQoYmxvY2spO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEFsbEJsb2NrcyA9ICgpID0+IHtcbiAgY29uc3QgYmxvY2tzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5ibG9ja1wiKTtcbiAgcmV0dXJuIGJsb2Nrcztcbn07XG5cbmNvbnN0IHN3YXBQcm9wZXJ0aWVzID0gKGJsb2NrXzEsIGJsb2NrXzIpID0+IHtcbiAgY29uc3QgdGVtcFZhbHVlXzEgPSBibG9ja18xLmRhdGFzZXQudmFsdWU7XG4gIGNvbnN0IHRlbXBCZ0NvbG9yXzEgPSBibG9ja18xLnN0eWxlLmJhY2tncm91bmRDb2xvcjtcblxuICB1cGRhdGVCbG9jayhibG9ja18xLCBibG9ja18yLmRhdGFzZXQudmFsdWUpO1xuICBibG9ja18xLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGJsb2NrXzIuc3R5bGUuYmFja2dyb3VuZENvbG9yO1xuXG4gIHVwZGF0ZUJsb2NrKGJsb2NrXzIsIHRlbXBWYWx1ZV8xKTtcbiAgYmxvY2tfMi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSB0ZW1wQmdDb2xvcl8xO1xufTtcblxuZXhwb3J0IGNvbnN0IHZpc3VhbGl6ZVN3YXBCbG9ja3MgPSBhc3luYyAoYmxvY2tfMSwgYmxvY2tfMiwgc3BlZWQpID0+IHtcbiAgYXdhaXQgbmV3IFByb21pc2UoKHJlcywgcmVqKSA9PiB7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBzd2FwUHJvcGVydGllcyhibG9ja18xLCBibG9ja18yLCBzcGVlZCk7XG4gICAgICBzZXRUaW1lb3V0KHJlcywgc3BlZWQpO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCB1cGRhdGVCbG9jayA9IChibG9jaywgdmFsdWUpID0+IHtcbiAgY29uc3QgYmxvY2tXaWR0aCA9IGJsb2NrLnN0eWxlLndpZHRoLnNsaWNlKDAsIDIpO1xuICBpZiAoYmxvY2tXaWR0aCA+IDIzKSB7XG4gICAgYmxvY2suaW5uZXJUZXh0ID0gdmFsdWU7XG4gIH1cbiAgYmxvY2suZGF0YXNldC52YWx1ZSA9IHZhbHVlO1xuICBibG9jay5zdHlsZS5oZWlnaHQgPSBgJHt2YWx1ZX1weGA7XG59O1xuXG5leHBvcnQgY29uc3Qgc2V0QmxvY2tCYWNrZ3JvdW5kID0gKGJsb2NrLCBjb2xvcikgPT4ge1xuICBibG9jay5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvcjtcbn07XG5cbmV4cG9ydCBjb25zdCB1cGRhdGVCbG9ja3NGcm9tQXJyYXkgPSAoYmxvY2tzLCBhcnIpID0+IHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICB1cGRhdGVCbG9jayhibG9ja3NbaV0sIGFycltpXSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVWYWx1ZXNBcnJGcm9tQmxvY2tzID0gKGJsb2NrcykgPT4ge1xuICBjb25zdCBhcnIgPSBbXTtcbiAgYmxvY2tzLmZvckVhY2goKGVsZW0pID0+IGFyci5wdXNoKHBhcnNlSW50KGVsZW0uZGF0YXNldC52YWx1ZSwgMTApKSk7XG4gIHJldHVybiBhcnI7XG59O1xuXG5leHBvcnQgY29uc3QgdmlzdWFsaXplQmxvY2tzID0gKGJsb2NrXzEsIGJsb2NrXzIsIGNvbG9yLCBzcGVlZCkgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlcywgcmVqKSA9PiB7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBibG9ja18xLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbG9yO1xuICAgICAgYmxvY2tfMi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvcjtcbiAgICB9KTtcbiAgICBzZXRUaW1lb3V0KHJlcywgc3BlZWQpO1xuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCB2aXN1YWxpemVCbG9jayA9IChibG9jaywgY29sb3IsIHNwZWVkKSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzLCByZWopID0+IHtcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIGJsb2NrLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbG9yO1xuICAgIH0pO1xuICAgIHNldFRpbWVvdXQocmVzLCBzcGVlZCk7XG4gIH0pO1xufTtcbiIsImV4cG9ydCBjb25zdCByZWRDb2xvciA9IFwiI2VlNTU0YVwiO1xuZXhwb3J0IGNvbnN0IGdyZWVuQ29sb3IgPSBcIiM2OWM2NTNcIjtcbmV4cG9ydCBjb25zdCB5ZWxsb3dDb2xvciA9IFwiI2YxZTA1OVwiO1xuZXhwb3J0IGNvbnN0IHB1cnBsZUNvbG9yID0gXCJwdXJwbGVcIjtcbmV4cG9ydCBjb25zdCBiYXNlQ29sb3IgPSBcIiM0Y2M4ZWFcIjtcbiIsImV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgY29uc3Qgc3BlZWQgPSBwYXJzZUludChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwZWVkVmFsXCIpLnZhbHVlLCAxMCk7XG4gIHJldHVybiBzcGVlZDtcbn07XG4iLCJleHBvcnQgY29uc3QgZ2V0UmFuZG9tTnVtID0gKG1pbiwgbWF4KSA9PiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBtYXgpICsgbWluO1xuIiwiaW1wb3J0IGdldEN1cnJlbnRTcGVlZCBmcm9tIFwiLi9nZXRDdXJyZW50U3BlZWRcIjtcbmltcG9ydCB7IHZpc3VhbGl6ZUJsb2NrIH0gZnJvbSBcIi4vYmxvY2tcIjtcbmltcG9ydCB7IHB1cnBsZUNvbG9yIH0gZnJvbSBcIi4vY29sb3JzXCI7XG5cbmV4cG9ydCBjb25zdCB3aXRoRW5kVmlzdWFsaXphdGlvbiA9IChmdW5jKSA9PiBhc3luYyAoYmxvY2tzLCBuLCBpc1N0b3BwZWQpID0+IHtcbiAgYXdhaXQgZnVuYyhibG9ja3MsIG4sIGlzU3RvcHBlZCk7XG5cbiAgY29uc3Qgc3BlZWQgPSBNYXRoLm1pbihnZXRDdXJyZW50U3BlZWQoKSArIDEwMDAgLyBuKTtcbiAgZm9yIChsZXQgaiA9IDA7IGogPCBuOyBqKyspIHtcbiAgICBpZiAoaXNTdG9wcGVkKCkpIHJldHVybjtcbiAgICBhd2FpdCB2aXN1YWxpemVCbG9jayhibG9ja3Nbal0sIHB1cnBsZUNvbG9yLCBzcGVlZCk7XG4gIH1cbn07XG4iLCJpbXBvcnQgeyBjcmVhdGVCbG9jaywgdXBkYXRlQmxvY2ssIHNldEJsb2NrQmFja2dyb3VuZCB9IGZyb20gXCIuLi9oZWxwZXJzL2Jsb2NrXCI7XG5pbXBvcnQgeyBiYXNlQ29sb3IgfSBmcm9tIFwiLi4vaGVscGVycy9jb2xvcnNcIjtcbmltcG9ydCBhc3luY0RlbGF5IGZyb20gXCIuLi9oZWxwZXJzL2FzeW5jRGVsYXlcIjtcbmltcG9ydCB7IGdldFJhbmRvbU51bSB9IGZyb20gXCIuLi9oZWxwZXJzL2dldFJhbmRvbU51bVwiO1xuaW1wb3J0IHsgd2l0aEVuZFZpc3VhbGl6YXRpb24gfSBmcm9tIFwiLi4vaGVscGVycy93aXRoRW5kVmlzdWFsaXphdGlvblwiO1xuXG5jbGFzcyBTb3J0aW5nVmlzdWFsaXplciB7XG4gIGNvbnN0cnVjdG9yKGFsZ29yaXRobXMsIGNvbnRhaW5lcklkLCB3aWR0aCwgaGVpZ2h0LCBuLCBzcGVlZCkge1xuICAgIHRoaXMuY29udGFpbmVySWQgPSBjb250YWluZXJJZDtcbiAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgdGhpcy5taW5IZWlnaHQgPSA2MDtcbiAgICB0aGlzLm4gPSBuO1xuICAgIHRoaXMubk1pbiA9IDQ7XG4gICAgdGhpcy5uTWF4ID0gMTAwO1xuICAgIHRoaXMuc3BlZWQgPSBzcGVlZDtcbiAgICB0aGlzLnNwZWVkTWluID0gMTtcbiAgICB0aGlzLnNwZWVkTWF4ID0gNTAwO1xuICAgIHRoaXMuaXNTb3J0aW5nID0gZmFsc2U7XG4gICAgdGhpcy5pc1N0b3AgPSBmYWxzZTtcbiAgICB0aGlzLmFsZ29yaXRobXMgPSBhbGdvcml0aG1zO1xuICAgIHRoaXMuY3VycmVudEFsZ29yaXRobSA9IG51bGw7XG5cbiAgICB0aGlzLmlzU3RvcHBlZCA9IHRoaXMuaXNTdG9wcGVkLmJpbmQodGhpcyk7XG4gIH1cblxuICBpbml0aWFsaXplKCkge1xuICAgIHRoaXMuY3JlYXRlTmF2KHRoaXMuYWxnb3JpdGhtcyk7XG4gICAgdGhpcy5jcmVhdGVCbG9ja3ModGhpcy5uKTtcblxuICAgIHRoaXMuc2V0SW5pdGlhbEFsZ29yaXRobShcImJ1YmJsZVwiKTtcblxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLnNldFJhbmdlSW5wdXRQcm9wZXJ0aWVzKCk7XG4gIH1cblxuICBhZGRFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLmFkZEVsZW1lbnRzVmFsSW5wdXRFdmVudExpc3RlbmVycygpO1xuICAgIHRoaXMuYWRkQnRuc0V2ZW50TGlzdGVuZXJzKCk7XG4gICAgdGhpcy5hZGROYXZBbGdvRWxlbXNFdmVudExpc3RlbmVycygpO1xuICB9XG5cbiAgYWRkRWxlbWVudHNWYWxJbnB1dEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIGNvbnN0IGVsZW1lbnRzVmFsSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImVsZW1lbnRzTnVtXCIpO1xuXG4gICAgZWxlbWVudHNWYWxJbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIChlKSA9PiB7XG4gICAgICBjb25zdCBuID0gZS50YXJnZXQudmFsdWU7XG4gICAgICB0aGlzLm4gPSBwYXJzZUludChuLCAxMCk7XG4gICAgICB0aGlzLmNyZWF0ZUJsb2NrcyhuKTtcbiAgICB9KTtcbiAgfVxuXG4gIGFkZEJ0bnNFdmVudExpc3RlbmVycygpIHtcbiAgICBjb25zdCBzb3J0QnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzb3J0QnRuXCIpO1xuICAgIGNvbnN0IHN0b3BCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN0b3BCdG5cIik7XG4gICAgY29uc3QgcmFuZG9taXplQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyYW5kb21pemVCdG5cIik7XG5cbiAgICBzb3J0QnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBhc3luYyAoZSkgPT4ge1xuICAgICAgdGhpcy5pc1N0b3AgPSBmYWxzZTtcbiAgICAgIGlmICghdGhpcy5pc1NvcnRpbmcpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVJc1NvcnRpbmdTdGF0ZSh0cnVlKTtcblxuICAgICAgICBjb25zdCBibG9ja3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmJsb2NrXCIpO1xuICAgICAgICBhd2FpdCB0aGlzLnByZXBhcmVCbG9ja3NGb3JTb3J0KGJsb2Nrcyk7XG4gICAgICAgIGF3YWl0IHRoaXMuY3VycmVudEFsZ29yaXRobShibG9ja3MsIHRoaXMubiwgdGhpcy5pc1N0b3BwZWQpO1xuXG4gICAgICAgIHRoaXMuaGFuZGxlSXNTb3J0aW5nU3RhdGUoZmFsc2UpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmFuZG9taXplQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuaXNTb3J0aW5nKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuYmxvY2tcIik7XG4gICAgICAgIHRoaXMuY2xlYXJCbG9ja3NDb2xvcihibG9ja3MpO1xuICAgICAgICB0aGlzLnJhbmRvbWl6ZUJsb2NrcyhibG9ja3MpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgc3RvcEJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuaXNTb3J0aW5nKSB7XG4gICAgICAgIHRoaXMuaXNTdG9wID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgYmxvY2tzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5ibG9ja1wiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGFkZE5hdkFsZ29FbGVtc0V2ZW50TGlzdGVuZXJzKCkge1xuICAgIGNvbnN0IGVsZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5uYXYtYWxnb3JpdGhtLWpzXCIpO1xuXG4gICAgZWxlbXMuZm9yRWFjaCgoZWxlbSkgPT4ge1xuICAgICAgZWxlbS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgICAgY29uc3QgaXNCbG9ja2VkID0gZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiYmxvY2tlZFwiKTtcbiAgICAgICAgaWYgKGlzQmxvY2tlZCkgcmV0dXJuO1xuXG4gICAgICAgIGVsZW1zLmZvckVhY2goKGVsZW0pID0+IGVsZW0uY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKSk7XG4gICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XG4gICAgICAgIHRoaXMuY3VycmVudEFsZ29yaXRobSA9IHRoaXMuYWxnb3JpdGhtc1tcbiAgICAgICAgICBlLnRhcmdldC5kYXRhc2V0LmFsZ29yaXRobUtleVxuICAgICAgICBdLmZ1bmM7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHNldFJhbmdlSW5wdXRQcm9wZXJ0aWVzKCkge1xuICAgIGNvbnN0IGVsZW1lbnRzTnVtSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImVsZW1lbnRzTnVtXCIpO1xuICAgIGVsZW1lbnRzTnVtSW5wdXQuc2V0QXR0cmlidXRlKFwibWluXCIsIHRoaXMubk1pbik7XG4gICAgZWxlbWVudHNOdW1JbnB1dC5zZXRBdHRyaWJ1dGUoXCJtYXhcIiwgdGhpcy5uTWF4KTtcbiAgICBlbGVtZW50c051bUlucHV0LnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIHRoaXMubik7XG5cbiAgICBjb25zdCBzcGVlZFZhbElucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGVlZFZhbFwiKTtcbiAgICBzcGVlZFZhbElucHV0LnNldEF0dHJpYnV0ZShcIm1pblwiLCB0aGlzLnNwZWVkTWluKTtcbiAgICBzcGVlZFZhbElucHV0LnNldEF0dHJpYnV0ZShcIm1heFwiLCB0aGlzLnNwZWVkTWF4KTtcbiAgICBzcGVlZFZhbElucHV0LnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIHRoaXMuc3BlZWQpO1xuICAgIHNwZWVkVmFsSW5wdXQuc3R5bGUuZGlyZWN0aW9uID0gXCJydGxcIjtcbiAgfVxuXG4gIHNldEluaXRpYWxBbGdvcml0aG0oYWxnb0tleSkge1xuICAgIHRoaXMuY3VycmVudEFsZ29yaXRobSA9IHRoaXMuYWxnb3JpdGhtc1thbGdvS2V5XS5mdW5jO1xuICAgIGNvbnN0IGVsZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5uYXYtYWxnb3JpdGhtLWpzXCIpO1xuICAgIGVsZW1zWzBdLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XG4gIH1cblxuICBoYW5kbGVJc1NvcnRpbmdTdGF0ZShpc1NvcnRpbmcpIHtcbiAgICB0aGlzLmlzU29ydGluZyA9IGlzU29ydGluZztcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNvcnRCdG5cIikuZGlzYWJsZWQgPSBpc1NvcnRpbmc7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyYW5kb21pemVCdG5cIikuZGlzYWJsZWQgPSBpc1NvcnRpbmc7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJlbGVtZW50c051bVwiKS5kaXNhYmxlZCA9IGlzU29ydGluZztcbiAgICB0aGlzLmhhbmRsZU90aGVyTmF2QWxnb3JpdGhtcyhpc1NvcnRpbmcpO1xuICB9XG5cbiAgaGFuZGxlT3RoZXJOYXZBbGdvcml0aG1zKGlzU29ydGluZykge1xuICAgIGNvbnN0IGVsZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5uYXYtYWxnb3JpdGhtLWpzXCIpO1xuXG4gICAgaWYgKGlzU29ydGluZykge1xuICAgICAgZWxlbXMuZm9yRWFjaCgoZWxlbSkgPT5cbiAgICAgICAgIWVsZW0uY2xhc3NMaXN0LmNvbnRhaW5zKFwiYWN0aXZlXCIpXG4gICAgICAgICAgPyBlbGVtLmNsYXNzTGlzdC5hZGQoXCJibG9ja2VkXCIpXG4gICAgICAgICAgOiBudWxsXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtcy5mb3JFYWNoKChlbGVtKSA9PlxuICAgICAgICBlbGVtLmNsYXNzTGlzdC5jb250YWlucyhcImJsb2NrZWRcIilcbiAgICAgICAgICA/IGVsZW0uY2xhc3NMaXN0LnJlbW92ZShcImJsb2NrZWRcIilcbiAgICAgICAgICA6IG51bGxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgY3JlYXRlQmxvY2tzKG4pIHtcbiAgICB0aGlzLmNsZWFyQ29udGFpbmVyKCk7XG4gICAgY29uc3QgYmxvY2tXaWR0aCA9IE1hdGguZmxvb3IodGhpcy53aWR0aCAvIG4pO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgIGNyZWF0ZUJsb2NrKFxuICAgICAgICB0aGlzLmNvbnRhaW5lcklkLFxuICAgICAgICBibG9ja1dpZHRoLFxuICAgICAgICBnZXRSYW5kb21OdW0odGhpcy5taW5IZWlnaHQsIHRoaXMuaGVpZ2h0KSxcbiAgICAgICAgYmFzZUNvbG9yXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHJhbmRvbWl6ZUJsb2NrcyhibG9ja3MpIHtcbiAgICBibG9ja3MuZm9yRWFjaCgoYmxvY2spID0+IHtcbiAgICAgIHVwZGF0ZUJsb2NrKGJsb2NrLCBnZXRSYW5kb21OdW0odGhpcy5taW5IZWlnaHQsIHRoaXMuaGVpZ2h0KSk7XG4gICAgICBzZXRCbG9ja0JhY2tncm91bmQoYmxvY2ssIGJhc2VDb2xvcik7XG4gICAgfSk7XG4gIH1cblxuICBjbGVhckJsb2Nrc0NvbG9yKGJsb2Nrcykge1xuICAgIGJsb2Nrcy5mb3JFYWNoKChibG9jaykgPT4ge1xuICAgICAgc2V0QmxvY2tCYWNrZ3JvdW5kKGJsb2NrLCBiYXNlQ29sb3IpO1xuICAgIH0pO1xuICB9XG5cbiAgaXNTdG9wcGVkKCkge1xuICAgIHJldHVybiB0aGlzLmlzU3RvcDtcbiAgfVxuXG4gIGFzeW5jIHByZXBhcmVCbG9ja3NGb3JTb3J0KGJsb2Nrcykge1xuICAgIGJsb2Nrcy5mb3JFYWNoKChibG9jaykgPT4ge1xuICAgICAgc2V0QmxvY2tCYWNrZ3JvdW5kKGJsb2NrLCBiYXNlQ29sb3IpO1xuICAgIH0pO1xuICAgIGF3YWl0IGFzeW5jRGVsYXkodGhpcy5zcGVlZCk7XG4gIH1cblxuICBjcmVhdGVOYXYoYWxnb3JpdGhtcykge1xuICAgIGNvbnN0IG5hdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibmF2XCIpO1xuXG4gICAgZm9yIChsZXQgW2tleSwgYWxnb10gb2YgT2JqZWN0LmVudHJpZXMoYWxnb3JpdGhtcykpIHtcbiAgICAgIGNvbnN0IGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgZWxlbS5jbGFzc0xpc3QgPSBcIm5hdi1hbGdvcml0aG0tanNcIjtcbiAgICAgIGVsZW0uaW5uZXJUZXh0ID0gYWxnby5uYW1lO1xuICAgICAgZWxlbS5kYXRhc2V0LmFsZ29yaXRobUtleSA9IGtleTtcbiAgICAgIG5hdi5hcHBlbmRDaGlsZChlbGVtKTtcbiAgICB9XG4gIH1cblxuICBjbGVhckNvbnRhaW5lcigpIHtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmNvbnRhaW5lcklkKS5pbm5lckhUTUwgPSBcIlwiO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNvcnRpbmdWaXN1YWxpemVyO1xuIiwiaW1wb3J0IHtcbiAgdmlzdWFsaXplU3dhcEJsb2NrcyxcbiAgdmlzdWFsaXplQmxvY2tzLFxuICBjcmVhdGVWYWx1ZXNBcnJGcm9tQmxvY2tzLFxufSBmcm9tIFwiLi4vaGVscGVycy9ibG9ja1wiO1xuaW1wb3J0IHsgZ3JlZW5Db2xvciwgcmVkQ29sb3IsIGJhc2VDb2xvciB9IGZyb20gXCIuLi9oZWxwZXJzL2NvbG9yc1wiO1xuaW1wb3J0IGdldEN1cnJlbnRTcGVlZCBmcm9tIFwiLi4vaGVscGVycy9nZXRDdXJyZW50U3BlZWRcIjtcbmltcG9ydCB7IHdpdGhFbmRWaXN1YWxpemF0aW9uIH0gZnJvbSBcIi4uL2hlbHBlcnMvd2l0aEVuZFZpc3VhbGl6YXRpb25cIjtcblxuY29uc3QgYnViYmxlU29ydCA9IGFzeW5jIChibG9ja3MsIG4sIGlzU3RvcHBlZCkgPT4ge1xuICBjb25zdCBhcnIgPSBjcmVhdGVWYWx1ZXNBcnJGcm9tQmxvY2tzKGJsb2Nrcyk7XG5cbiAgbGV0IHN3YXBwZWQ7XG5cbiAgZG8ge1xuICAgIHN3YXBwZWQgPSBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG4gLSAxOyBpKyspIHtcbiAgICAgIGlmIChpc1N0b3BwZWQoKSkgcmV0dXJuO1xuICAgICAgY29uc3Qgc3BlZWQgPSBnZXRDdXJyZW50U3BlZWQoKTtcblxuICAgICAgYXdhaXQgdmlzdWFsaXplQmxvY2tzKGJsb2Nrc1tpXSwgYmxvY2tzW2kgKyAxXSwgZ3JlZW5Db2xvciwgc3BlZWQpO1xuICAgICAgaWYgKGFycltpXSA+IGFycltpICsgMV0pIHtcbiAgICAgICAgYXdhaXQgdmlzdWFsaXplQmxvY2tzKGJsb2Nrc1tpXSwgYmxvY2tzW2kgKyAxXSwgcmVkQ29sb3IsIHNwZWVkKTtcblxuICAgICAgICBjb25zdCB0ZW1wID0gYXJyW2ldO1xuICAgICAgICBhcnJbaV0gPSBhcnJbaSArIDFdO1xuICAgICAgICBhcnJbaSArIDFdID0gdGVtcDtcblxuICAgICAgICBhd2FpdCB2aXN1YWxpemVTd2FwQmxvY2tzKGJsb2Nrc1tpXSwgYmxvY2tzW2kgKyAxXSwgc3BlZWQpO1xuXG4gICAgICAgIHN3YXBwZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgYXdhaXQgdmlzdWFsaXplQmxvY2tzKGJsb2Nrc1tpXSwgYmxvY2tzW2kgKyAxXSwgYmFzZUNvbG9yLCBzcGVlZCk7XG4gICAgfVxuICB9IHdoaWxlIChzd2FwcGVkKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhFbmRWaXN1YWxpemF0aW9uKGJ1YmJsZVNvcnQpO1xuIiwiZXhwb3J0IHsgZGVmYXVsdCBhcyBidWJibGVTb3J0IH0gZnJvbSBcIi4vYnViYmxlU29ydFwiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBtZXJnZVNvcnQgfSBmcm9tIFwiLi9tZXJnZVNvcnRcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcXVpY2tTb3J0IH0gZnJvbSBcIi4vcXVpY2tTb3J0XCI7XG4iLCJpbXBvcnQge1xuICB2aXN1YWxpemVCbG9ja3MsXG4gIHVwZGF0ZUJsb2Nrc0Zyb21BcnJheSxcbiAgY3JlYXRlVmFsdWVzQXJyRnJvbUJsb2Nrcyxcbn0gZnJvbSBcIi4uL2hlbHBlcnMvYmxvY2tcIjtcbmltcG9ydCBnZXRDdXJyZW50U3BlZWQgZnJvbSBcIi4uL2hlbHBlcnMvZ2V0Q3VycmVudFNwZWVkXCI7XG5pbXBvcnQgeyBncmVlbkNvbG9yLCByZWRDb2xvciwgYmFzZUNvbG9yIH0gZnJvbSBcIi4uL2hlbHBlcnMvY29sb3JzXCI7XG5pbXBvcnQgeyB3aXRoRW5kVmlzdWFsaXphdGlvbiB9IGZyb20gXCIuLi9oZWxwZXJzL3dpdGhFbmRWaXN1YWxpemF0aW9uXCI7XG5cbmNvbnN0IG1lcmdlU29ydCA9IGFzeW5jIChibG9ja3MsIG4sIGlzU3RvcHBlZCkgPT4ge1xuICBjb25zdCBhcnIgPSBjcmVhdGVWYWx1ZXNBcnJGcm9tQmxvY2tzKGJsb2Nrcyk7XG4gIGNvbnN0IGxlbiA9IG47XG5cbiAgZm9yIChsZXQgc2l6ZSA9IDE7IHNpemUgPD0gbGVuOyBzaXplID0gc2l6ZSAqIDIpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSArPSAyICogc2l6ZSkge1xuICAgICAgbGV0IGxlZnQgPSBpO1xuICAgICAgbGV0IHJpZ2h0ID0gTWF0aC5taW4oc2l6ZSArIGksIGxlbik7XG4gICAgICBsZXQgbGVmdFRvID0gcmlnaHQ7XG4gICAgICBsZXQgcmlnaHRUbyA9IE1hdGgubWluKHJpZ2h0ICsgc2l6ZSwgbGVuKTtcblxuICAgICAgd2hpbGUgKGxlZnQgPCBsZWZ0VG8gJiYgcmlnaHQgPCByaWdodFRvKSB7XG4gICAgICAgIGlmIChpc1N0b3BwZWQoKSkgcmV0dXJuO1xuICAgICAgICBjb25zdCBzcGVlZCA9IGdldEN1cnJlbnRTcGVlZCgpO1xuXG4gICAgICAgIGF3YWl0IHZpc3VhbGl6ZUJsb2NrcyhibG9ja3NbbGVmdF0sIGJsb2Nrc1tyaWdodF0sIGdyZWVuQ29sb3IsIHNwZWVkKTtcblxuICAgICAgICBpZiAoYXJyW2xlZnRdID49IGFycltyaWdodF0pIHtcbiAgICAgICAgICBhd2FpdCB2aXN1YWxpemVCbG9ja3MoYmxvY2tzW2xlZnRdLCBibG9ja3NbcmlnaHRdLCByZWRDb2xvciwgc3BlZWQpO1xuXG4gICAgICAgICAgYXJyLnNwbGljZShsZWZ0LCAwLCBhcnJbcmlnaHRdKTtcbiAgICAgICAgICByaWdodCsrO1xuICAgICAgICAgIGxlZnQrKztcbiAgICAgICAgICBsZWZ0VG8rKztcbiAgICAgICAgICBhcnIuc3BsaWNlKHJpZ2h0LCAxKTtcblxuICAgICAgICAgIGF3YWl0IHZpc3VhbGl6ZUJsb2NrcyhcbiAgICAgICAgICAgIGJsb2Nrc1tsZWZ0IC0gMV0sXG4gICAgICAgICAgICBibG9ja3NbcmlnaHQgLSAxXSxcbiAgICAgICAgICAgIGJhc2VDb2xvcixcbiAgICAgICAgICAgIHNwZWVkXG4gICAgICAgICAgKTtcbiAgICAgICAgICB1cGRhdGVCbG9ja3NGcm9tQXJyYXkoYmxvY2tzLCBhcnIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxlZnQrKztcbiAgICAgICAgICBhd2FpdCB2aXN1YWxpemVCbG9ja3MoXG4gICAgICAgICAgICBibG9ja3NbbGVmdCAtIDFdLFxuICAgICAgICAgICAgYmxvY2tzW3JpZ2h0XSxcbiAgICAgICAgICAgIGJhc2VDb2xvcixcbiAgICAgICAgICAgIHNwZWVkXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aEVuZFZpc3VhbGl6YXRpb24obWVyZ2VTb3J0KTtcbiIsImltcG9ydCB7XG4gIHZpc3VhbGl6ZUJsb2NrcyxcbiAgdmlzdWFsaXplU3dhcEJsb2NrcyxcbiAgdmlzdWFsaXplQmxvY2ssXG4gIGNyZWF0ZVZhbHVlc0FyckZyb21CbG9ja3MsXG59IGZyb20gXCIuLi9oZWxwZXJzL2Jsb2NrXCI7XG5pbXBvcnQgZ2V0Q3VycmVudFNwZWVkIGZyb20gXCIuLi9oZWxwZXJzL2dldEN1cnJlbnRTcGVlZFwiO1xuaW1wb3J0IHtcbiAgZ3JlZW5Db2xvcixcbiAgcmVkQ29sb3IsXG4gIGJhc2VDb2xvcixcbiAgeWVsbG93Q29sb3IsXG59IGZyb20gXCIuLi9oZWxwZXJzL2NvbG9yc1wiO1xuaW1wb3J0IHsgd2l0aEVuZFZpc3VhbGl6YXRpb24gfSBmcm9tIFwiLi4vaGVscGVycy93aXRoRW5kVmlzdWFsaXphdGlvblwiO1xuXG5jb25zdCBwYXJ0aXRpb24gPSBhc3luYyAoYXJyLCBzdGFydCwgZW5kLCBibG9ja3MsIGlzU3RvcHBlZCkgPT4ge1xuICBsZXQgaSA9IHN0YXJ0ICsgMTtcbiAgbGV0IHBpdiA9IGFycltzdGFydF07XG5cbiAgYXdhaXQgdmlzdWFsaXplQmxvY2soYmxvY2tzW3N0YXJ0XSwgeWVsbG93Q29sb3IsIGdldEN1cnJlbnRTcGVlZCgpKTtcblxuICBmb3IgKGxldCBqID0gc3RhcnQgKyAxOyBqIDw9IGVuZDsgaisrKSB7XG4gICAgaWYgKGlzU3RvcHBlZCgpKSByZXR1cm47XG5cbiAgICBjb25zdCBzcGVlZCA9IGdldEN1cnJlbnRTcGVlZCgpO1xuXG4gICAgYXdhaXQgdmlzdWFsaXplQmxvY2tzKGJsb2Nrc1tpXSwgYmxvY2tzW2pdLCBncmVlbkNvbG9yLCBzcGVlZCk7XG5cbiAgICBpZiAoYXJyW2pdIDwgcGl2KSB7XG4gICAgICBhd2FpdCB2aXN1YWxpemVCbG9ja3MoYmxvY2tzW2ldLCBibG9ja3Nbal0sIHJlZENvbG9yLCBzcGVlZCk7XG5cbiAgICAgIGNvbnN0IHRlbXAgPSBhcnJbaV07XG4gICAgICBhcnJbaV0gPSBhcnJbal07XG4gICAgICBhcnJbal0gPSB0ZW1wO1xuXG4gICAgICAvLyBTd2FwXG4gICAgICBhd2FpdCB2aXN1YWxpemVTd2FwQmxvY2tzKGJsb2Nrc1tpXSwgYmxvY2tzW2pdLCBzcGVlZCk7XG4gICAgICBhd2FpdCB2aXN1YWxpemVCbG9ja3MoYmxvY2tzW2ldLCBibG9ja3Nbal0sIGJhc2VDb2xvciwgc3BlZWQpO1xuXG4gICAgICBpKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF3YWl0IHZpc3VhbGl6ZUJsb2NrcyhibG9ja3NbaV0sIGJsb2Nrc1tqXSwgYmFzZUNvbG9yLCBzcGVlZCk7XG4gICAgfVxuICB9XG4gIC8vIFB1dCBwaXZvdCBpbiBpdHMgcHJvcGVyIHBsYWNlXG4gIGNvbnN0IHRlbXAgPSBhcnJbc3RhcnRdO1xuICBhcnJbc3RhcnRdID0gYXJyW2kgLSAxXTtcbiAgYXJyW2kgLSAxXSA9IHRlbXA7XG5cbiAgYXdhaXQgdmlzdWFsaXplU3dhcEJsb2NrcyhibG9ja3Nbc3RhcnRdLCBibG9ja3NbaSAtIDFdLCBnZXRDdXJyZW50U3BlZWQoKSk7XG4gIGF3YWl0IHZpc3VhbGl6ZUJsb2NrcyhcbiAgICBibG9ja3Nbc3RhcnRdLFxuICAgIGJsb2Nrc1tpIC0gMV0sXG4gICAgYmFzZUNvbG9yLFxuICAgIGdldEN1cnJlbnRTcGVlZCgpXG4gICk7XG5cbiAgcmV0dXJuIGkgLSAxO1xufTtcblxuY29uc3QgcXVpY2tTb3J0QWxnbyA9IGFzeW5jIChhcnIsIHN0YXJ0LCBlbmQsIGJsb2NrcywgaXNTdG9wcGVkKSA9PiB7XG4gIGlmIChzdGFydCA8IGVuZCkge1xuICAgIGxldCBwaXZvdFBvcyA9IGF3YWl0IHBhcnRpdGlvbihhcnIsIHN0YXJ0LCBlbmQsIGJsb2NrcywgaXNTdG9wcGVkKTtcbiAgICBpZiAoaXNTdG9wcGVkKCkpIHJldHVybjtcblxuICAgIGF3YWl0IHF1aWNrU29ydEFsZ28oYXJyLCBzdGFydCwgcGl2b3RQb3MgLSAxLCBibG9ja3MsIGlzU3RvcHBlZCk7XG4gICAgYXdhaXQgcXVpY2tTb3J0QWxnbyhhcnIsIHBpdm90UG9zICsgMSwgZW5kLCBibG9ja3MsIGlzU3RvcHBlZCk7XG4gIH1cbn07XG5cbmNvbnN0IHF1aWNrU29ydCA9IGFzeW5jIChibG9ja3MsIG4sIGlzU3RvcHBlZCkgPT4ge1xuICBjb25zdCBhcnIgPSBjcmVhdGVWYWx1ZXNBcnJGcm9tQmxvY2tzKGJsb2Nrcyk7XG5cbiAgYXdhaXQgcXVpY2tTb3J0QWxnbyhhcnIsIDAsIG4gLSAxLCBibG9ja3MsIGlzU3RvcHBlZCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoRW5kVmlzdWFsaXphdGlvbihxdWlja1NvcnQpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==